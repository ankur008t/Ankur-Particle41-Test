name: CI/CD Pipeline

on:
  push:
    branches: [ main, dev ]
    paths:
      - 'app/**'
      - '.github/workflows/ci-cd.yml'
      - 'Dockerfile'
      - 'terraform/**'
  pull_request:
    branches: [ main ]
    paths:
      - 'app/**'
      - '.github/workflows/ci-cd.yml'
      - 'Dockerfile'
      - 'terraform/**'
jobs:
  test:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v3
      
      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: '3.11'
          
      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install -r app/requirements.txt
          pip install -r tests/requirements-test.txt
          
      - name: Run tests
        run: pytest tests/test_main.py

  security-scan:
    runs-on: ubuntu-latest
    needs: test
    steps:
      - uses: actions/checkout@v3
      
      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: '3.11'
          
      - name: Install security tools
        run: |
            python -m pip install --upgrade pip
            pip install bandit safety
            
      - name: Run static code analysis
        run: bandit -r app/ --skip B104
          
      - uses: pyupio/safety-action@v1
        with:
          api-key: ${{ secrets.SAFETY_API_KEY }}

  build-and-push:
    runs-on: ubuntu-latest
    needs: [test, security-scan]
    if: github.event_name == 'push' && (github.ref == 'refs/heads/main' || github.ref == 'refs/heads/dev')
    steps:
      - uses: actions/checkout@v3
      
      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v2
        
      - name: Login to DockerHub
        uses: docker/login-action@v2
        with:
          username: ${{ secrets.DOCKERHUB_USERNAME }}
          password: ${{ secrets.DOCKERHUB_TOKEN }}
          
      - name: Build and push
        uses: docker/build-push-action@v4
        with:
          context: .
          file: ./Dockerfile
          push: true
          tags: ${{ secrets.DOCKERHUB_USERNAME }}/simpletimeservice:latest,${{ secrets.DOCKERHUB_USERNAME }}/simpletimeservice:${{ github.sha }}
          cache-from: type=registry,ref=${{ secrets.DOCKERHUB_USERNAME }}/simpletimeservice:buildcache
          cache-to: type=registry,ref=${{ secrets.DOCKERHUB_USERNAME }}/simpletimeservice:buildcache,mode=max

  terraform-deploy:
    runs-on: ubuntu-latest
    needs: [test, security-scan]
    if: github.event_name == 'push' && (github.ref == 'refs/heads/main' || github.ref == 'refs/heads/dev')
    steps:
      - uses: actions/checkout@v3
      
      - name: Set branch name
        id: branch
        run: |
          echo "BRANCH_NAME=${GITHUB_REF#refs/heads/}" >> $GITHUB_OUTPUT
      
      - name: Setup Terraform
        uses: hashicorp/setup-terraform@v2
        
      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v1
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ secrets.AWS_REGION }}
      
      - name: Login to Amazon ECR
        id: login-ecr
        uses: aws-actions/amazon-ecr-login@v1
        
      - name: Create ECR repository if it doesn't exist
        run: |
            aws ecr describe-repositories --repository-names simpletimeservice || \
            aws ecr create-repository --repository-name simpletimeservice
        
      - name: Build, tag, and push image to Amazon ECR
        env:
            ECR_REGISTRY: ${{ steps.login-ecr.outputs.registry }}
            ECR_REPOSITORY: simpletimeservice
            IMAGE_TAG: ${{ github.sha }}-${{ steps.branch.outputs.BRANCH_NAME }}
        run: |
            docker build -t $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG -f Dockerfile.lambda -t $ECR_REGISTRY/$ECR_REPOSITORY:latest .
            docker push $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG
            docker push $ECR_REGISTRY/$ECR_REPOSITORY:latest
            echo "image=$ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG" >> $GITHUB_OUTPUT

      - name: Create Terraform Backend Infrastructure
        run: |
            # Check if the bucket already exists
            if aws s3api head-bucket --bucket simpletimeservice-terraform-state 2>/dev/null; then
              echo "Bucket already exists, skipping creation"
            else
              # For us-east-1, don't use LocationConstraint
              if [ "${{ secrets.AWS_REGION }}" = "us-east-1" ]; then
                aws s3api create-bucket \
                  --bucket simpletimeservice-terraform-state \
                  --region us-east-1
              else
                # For other regions, use the region as LocationConstraint
                aws s3api create-bucket \
                  --bucket simpletimeservice-terraform-state \
                  --region ${{ secrets.AWS_REGION }} \
                  --create-bucket-configuration LocationConstraint=${{ secrets.AWS_REGION }}
              fi
            fi
            
            # Enable versioning
            aws s3api put-bucket-versioning \
              --bucket simpletimeservice-terraform-state \
              --versioning-configuration Status=Enabled
            
            # Enable encryption
            aws s3api put-bucket-encryption \
              --bucket simpletimeservice-terraform-state \
              --server-side-encryption-configuration '{
                "Rules": [
                  {
                    "ApplyServerSideEncryptionByDefault": {
                      "SSEAlgorithm": "AES256"
                    }
                  }
                ]
              }'
            
            # Check if the DynamoDB table already exists
            if aws dynamodb describe-table --table-name simpletimeservice-terraform-lock --region ${{ secrets.AWS_REGION }} 2>/dev/null; then
              echo "DynamoDB table already exists, skipping creation"
            else
              # Create DynamoDB table
              aws dynamodb create-table \
                --table-name simpletimeservice-terraform-lock \
                --attribute-definitions AttributeName=LockID,AttributeType=S \
                --key-schema AttributeName=LockID,KeyType=HASH \
                --billing-mode PAY_PER_REQUEST \
                --region ${{ secrets.AWS_REGION }}
            fi
        continue-on-error: true
            
      - name: Terraform Init
        run: |
          cd terraform
          terraform init -backend-config="key=${{ steps.branch.outputs.BRANCH_NAME }}-terraform.tfstate"          
      - name: Terraform Plan
        env:
         ECR_REGISTRY: ${{ steps.login-ecr.outputs.registry }}
         ECR_REPOSITORY: simpletimeservice
         IMAGE_TAG: ${{ github.sha }}-${{ steps.branch.outputs.BRANCH_NAME }}
        run: |
          cd terraform
          terraform plan -out=tfplan -var="image_tag=$IMAGE_TAG" -var="branch_name=${{ steps.branch.outputs.BRANCH_NAME }}" -var="environment=${{ steps.branch.outputs.BRANCH_NAME }}" -out=tfplan
          
      - name: Terraform Apply
        run: |
          cd terraform
          terraform apply -auto-approve -var="branch_name=${{ steps.branch.outputs.BRANCH_NAME }}" -var="environment=${{ steps.branch.outputs.BRANCH_NAME }}" tfplan

      - name: Get Terraform Outputs
        id: terraform-output
        run: |
          cd terraform
          api_endpoint=$(terraform output -raw api_gateway_url 2>/dev/null | head -n 1 || echo "")
          echo "::set-output name=api_endpoint::$api_endpoint"
          echo "TEST=$test" >> $GITHUB_OUTPUT
        continue-on-error: true
    outputs:
      api_endpoint: ${{ steps.terraform-output.outputs.api_endpoint }}
      test: ${{ steps.terraform-output.outputs.TEST }}
    
  post-deployment-tests:
    needs: terraform-deploy
    runs-on: ubuntu-latest
    if: success()
    steps:
    - uses: actions/checkout@v3
    
    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: '3.11'
    
    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -r tests/requirements-test.txt
    
    - name: Debug API Endpoint
      run: |
        echo "API Endpoint: $API_ENDPOINT"
        echo "TEST: $TEST"
        echo "API: $api_endpoint"
      env:
        API_ENDPOINT: ${{ needs.terraform-deploy.outputs.api_endpoint }}
        TEST: ${{ needs.terraform-deploy.outputs.test }}
        
    - name: Run integration tests against newly deployed infrastructure
      run: |
        pytest tests/test_integration.py -v
      env:
        API_ENDPOINT: ${{ needs.terraform-deploy.outputs.api_endpoint }}
