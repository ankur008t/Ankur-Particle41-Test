name: Security Scan

on:
  push:
    branches: [ main ]
  pull_request:
    branches: [ main ]

jobs:
  security:
    runs-on: ubuntu-latest
    steps:
    - name: Checkout code
      uses: actions/checkout@v3
      
    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: '3.11'
        
    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -r requirements.txt
        pip install bandit safety
        
    - name: Run Bandit (Static Code Analysis)
      run: |
        # Create a SARIF-compatible output
        bandit -r app/ -f json | python -c '
        import json, sys
        from datetime import datetime
        
        bandit_json = json.load(sys.stdin)
        
        # Create SARIF structure
        sarif_output = {
            "$schema": "https://raw.githubusercontent.com/oasis-tcs/sarif-spec/master/Schemata/sarif-schema-2.1.0.json",
            "version": "2.1.0",
            "runs": [
                {
                    "tool": {
                        "driver": {
                            "name": "Bandit",
                            "informationUri": "https://github.com/PyCQA/bandit",
                            "version": "1.7.5",
                            "rules": []
                        }
                    },
                    "results": []
                }
            ]
        }
        
        # Convert Bandit results to SARIF
        for result in bandit_json.get("results", []):
            sarif_result = {
                "ruleId": f"B{result.get(\"test_id\")}",
                "message": {
                    "text": result.get("issue_text", "")
                },
                "level": "warning" if result.get("issue_severity") == "MEDIUM" else "error" if result.get("issue_severity") == "HIGH" else "note",
                "locations": [
                    {
                        "physicalLocation": {
                            "artifactLocation": {
                                "uri": result.get("filename", "").replace("./", "")
                            },
                            "region": {
                                "startLine": result.get("line_number", 1)
                            }
                        }
                    }
                ]
            }
            sarif_output["runs"][0]["results"].append(sarif_result)
            
            # Add rule if not already added
            rule_id = f"B{result.get(\"test_id\")}"
            if not any(r.get("id") == rule_id for r in sarif_output["runs"][0]["tool"]["driver"]["rules"]):
                sarif_output["runs"][0]["tool"]["driver"]["rules"].append({
                    "id": rule_id,
                    "shortDescription": {
                        "text": result.get("test_name", "")
                    },
                    "helpText": result.get("issue_text", "")
                })
        
        json.dump(sarif_output, sys.stdout)
        ' > bandit-results.sarif
      continue-on-error: true
      
    - name: Upload Bandit results
      uses: github/codeql-action/upload-sarif@v3
      with:
        sarif_file: bandit-results.sarif
        
    - name: Run Safety (Dependency Check)
      run: safety check -r requirements.txt --json > safety-results.json
      continue-on-error: true
      
    - name: Display Safety results
      run: cat safety-results.json
      
    - name: Check for critical vulnerabilities
      run: |
        if grep -q '"severity": "critical"' safety-results.json; then
          echo "Critical vulnerabilities found!"
          exit 1
        fi

